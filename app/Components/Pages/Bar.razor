@page "/"
@using app.Domain
@rendermode InteractiveServer
@inject AbartDbContext AbartDbContext

<PageTitle>Oan den tuug</PageTitle>
@if (Products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var product in Products)
    {
        <div class="row mb-2">
            <button class="btn btn-primary">
                <span @onclick="@(() => UpdateTransaction(product, false, 1))">
                    <svg height="50px" width="50px">
                        <use href="bootstrap-icons/bootstrap-icons.svg#arrow-down-circle-fill"></use>
                    </svg>
                </span>
                <span style="display:inline-block; width:80%">
                    @product.Name
                    @(Transaction.Orders.FirstOrDefault(o => o.Product.Id == product.Id)?.Quantity)
                </span>
                <span @onclick="@(() => UpdateTransaction(product, true, 1))">
                    <svg height="50px" width="50px">
                        <use href="bootstrap-icons/bootstrap-icons.svg#arrow-up-circle-fill"></use>
                    </svg>
                </span>
            </button>
        </div>
    }
    <div class="row">
        <button class="btn btn-lg btn-success" @onclick="AddTransaction">Afrekenen (Totaal = @Transaction.Total.ToString("F2"))</button>
    </div>
}

@code {
    private List<Product> Products;
    private Transaction Transaction;

    protected override async Task OnInitializedAsync()
    {
        Products = AbartDbContext.Products.ToList();
        InitTransaction();
    }

    private void InitTransaction()
    {
        Transaction = new Transaction()
            {
                Seller = new Person()
                {
                    Email = "maarten.demuynck@gmail.com",
                    Name = "Maarten De Muynck",
                    Group = "Afsprong"
                },
                Orders = new List<Order>()
            };
    }

    private void UpdateTransaction(Product product, bool up, int quantity)
    {
        var order = Transaction.Orders.FirstOrDefault(o => o.Product.Id == product.Id);
        if (order == null)
        {
            if (up)
            {
                order = new Order { Product = product, Quantity = 1 };
                Transaction.Orders.Add(order);
                Transaction.Total = order.Quantity * product.UnitPrice;
            }
        }
        else
        {
            order.Quantity = up == true ? order.Quantity + quantity : order.Quantity - quantity;
            Transaction.Total = order.Quantity * product.UnitPrice;
        }

    }

    private async Task AddTransaction()
    {
        AbartDbContext.Transactions.Add(Transaction);
        await AbartDbContext.SaveChangesAsync();
        InitTransaction();
    }

}